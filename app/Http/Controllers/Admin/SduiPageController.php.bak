<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\SduiPage;
use App\Models\SduiComponent;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Spatie\Permission\Models\Role;

class SduiPageController extends Controller
{
    /**
     * Display a listing of pages
     */
    public function index(Request $request)
    {
        $query = SduiPage::with(['roles', 'components', 'creator', 'updater']);

        // Search functionality
        if ($request->has('search') && $request->search) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('title', 'like', "%{$search}%")
                    ->orWhere('slug', 'like', "%{$search}%")
                    ->orWhere('screen_type', 'like', "%{$search}%");
            });
        }

        // Filter by role
        if ($request->has('role') && $request->role) {
            $query->forRole($request->role);
        }

        // Filter by screen type
        if ($request->has('screen_type') && $request->screen_type) {
            $query->byScreenType($request->screen_type);
        }

        // Include trashed if requested
        if ($request->has('show_deleted') && $request->show_deleted) {
            $query->withTrashed();
        }

        $pages = $query->latest()->paginate(15);
        $roles = Role::all();

        return view('admin.sdui.pages.index', compact('pages', 'roles'));
    }

    /**
     * Show the form for creating a new page
     */
    public function create()
    {
        $roles = Role::all();
        return view('admin.sdui.pages.create', compact('roles'));
    }

    /**
     * Store a newly created page
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'slug' => 'nullable|string|max:255|unique:sdui_pages,slug',
            'description' => 'nullable|string',
            'screen_type' => 'nullable|string|max:100',
            'is_active' => 'boolean',
            'roles' => 'nullable|array',
            'roles.*' => 'exists:roles,id',
        ]);

        // Auto-generate slug if not provided
        if (empty($validated['slug'])) {
            $validated['slug'] = Str::slug($validated['title']);
        }

        $validated['created_by'] = auth()->id();
        $validated['updated_by'] = auth()->id();

        $page = SduiPage::create($validated);

        // Attach roles
        if (!empty($validated['roles'])) {
            $page->roles()->sync($validated['roles']);
        }

        flash()->success('Page created successfully!');
        return redirect()->route('admin.sdui.pages.edit', $page->id);
    }

    /**
     * Display the specified page
     */
    public function show($id)
    {
        $page = SduiPage::with(['roles', 'components.roles', 'versions.creator'])->findOrFail($id);
        return view('admin.sdui.pages.show', compact('page'));
    }

    /**
     * Show the form for editing the specified page
     */
    public function edit($id)
    {
        $page = SduiPage::with(['roles', 'components.roles'])->findOrFail($id);
        $roles = Role::all();
        $componentTypes = $this->getComponentTypes();
        
        return view('admin.sdui.pages.edit', compact('page', 'roles', 'componentTypes'));
    }

    /**
     * Update the specified page
     */
    public function update(Request $request, $id)
    {
        $page = SduiPage::findOrFail($id);

        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'slug' => 'required|string|max:255|unique:sdui_pages,slug,' . $id,
            'description' => 'nullable|string',
            'screen_type' => 'nullable|string|max:100',
            'is_active' => 'boolean',
            'roles' => 'nullable|array',
            'roles.*' => 'exists:roles,id',
        ]);

        $validated['updated_by'] = auth()->id();

        $page->update($validated);

        // Sync roles
        if (isset($validated['roles'])) {
            $page->roles()->sync($validated['roles']);
        } else {
            $page->roles()->sync([]);
        }

        flash()->success('Page updated successfully!');
        return redirect()->route('admin.sdui.pages.edit', $page->id);
    }

    /**
     * Remove the specified page (soft delete)
     */
    public function destroy($id)
    {
        $page = SduiPage::findOrFail($id);
        $page->delete();

        flash()->success('Page deleted successfully!');
        return redirect()->route('admin.sdui.pages.index');
    }

    /**
     * Restore a soft-deleted page
     */
    public function restore($id)
    {
        $page = SduiPage::withTrashed()->findOrFail($id);
        $page->restore();

        flash()->success('Page restored successfully!');
        return redirect()->route('admin.sdui.pages.edit', $page->id);
    }

    /**
     * Permanently delete a page
     */
    public function forceDelete($id)
    {
        $page = SduiPage::withTrashed()->findOrFail($id);
        $page->forceDelete();

        flash()->success('Page permanently deleted!');
        return redirect()->route('admin.sdui.pages.index');
    }

    /**
     * Revert page to a specific version
     */
    public function revert($id, $versionNumber)
    {
        $page = SduiPage::findOrFail($id);
        
        if ($page->revertToVersion($versionNumber)) {
            flash()->success("Page reverted to version {$versionNumber} successfully!");
        } else {
            flash()->error("Failed to revert to version {$versionNumber}.");
        }

        return redirect()->route('admin.sdui.pages.edit', $page->id);
    }

    /**
     * Get version history for a page
     */
    public function versions($id)
    {
        $page = SduiPage::with('versions.creator')->findOrFail($id);
        $versions = $page->versions;

        return response()->json([
            'success' => true,
            'versions' => $versions,
        ]);
    }

    /**
     * Duplicate a page
     */
    public function duplicate($id)
    {
        $originalPage = SduiPage::with(['roles', 'components.roles'])->findOrFail($id);
        
        // Create new page
        $newPage = $originalPage->replicate();
        $newPage->title = $originalPage->title . ' (Copy)';
        $newPage->slug = $originalPage->slug . '-copy-' . time();
        $newPage->created_by = auth()->id();
        $newPage->updated_by = auth()->id();
        $newPage->save();

        // Duplicate roles
        $newPage->roles()->sync($originalPage->roles->pluck('id'));

        // Duplicate components
        foreach ($originalPage->components as $component) {
            $newComponent = $component->replicate();
            $newComponent->page_id = $newPage->id;
            $newComponent->created_by = auth()->id();
            $newComponent->updated_by = auth()->id();
            $newComponent->save();

            // Duplicate component roles
            $newComponent->roles()->sync($component->roles->pluck('id'));
        }

        flash()->success('Page duplicated successfully!');
        return redirect()->route('admin.sdui.pages.edit', $newPage->id);
    }

    /**
     * Get available component types
     */
    private function getComponentTypes()
    {
        return [
            'header' => 'Header',
            'text' => 'Text',
            'button' => 'Button',
            'form' => 'Form',
            'list' => 'List',
            'image' => 'Image',
            'input' => 'Input Field',
            'card' => 'Card',
            'divider' => 'Divider',
            'spacer' => 'Spacer',
            'grid' => 'Grid Layout',
            'carousel' => 'Carousel',
            'tabs' => 'Tabs',
            'accordion' => 'Accordion',
        ];
    }
}

